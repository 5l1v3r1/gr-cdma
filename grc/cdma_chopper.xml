<?xml version="1.0"?>
<block>
  <name>chopper</name>
  <key>cdma_chopper</key>
  <category>cdma</category>
  <import>import cdma</import>
  <make>cdma.chopper($length, $lengthi,$type.size * $vector_length)</make>
  <!-- Make one 'param' node for every Parameter you want settable from the GUI.
       Sub-nodes:
       * name
       * key (makes the value accessible as $keyname, e.g. in the make node)
       * type -->
  <param>
    <name>Type</name>
    <key>type</key>
    <type>enum</type>
    <option>
      <name>Complex</name>
      <key>complex</key>
      <opt>size:gr.sizeof_gr_complex</opt>
    </option>
    <option>
      <name>Float</name>
      <key>float</key>
      <opt>size:gr.sizeof_float</opt>
    </option>
    <option>
      <name>Int</name>
      <key>int</key>
      <opt>size:gr.sizeof_int</opt>
    </option>
    <option>
      <name>Short</name>
      <key>short</key>
      <opt>size:gr.sizeof_short</opt>
    </option>
    <option>
      <name>Byte</name>
      <key>byte</key>
      <opt>size:gr.sizeof_char</opt>
    </option>
  </param>

  <param>
    <name>vector_length</name>
    <key>vector_length</key>
    <value>1</value>
    <type>int</type>
  </param>

  <param>
    <name>length_out</name>
    <key>length</key>
    <type>int</type>
  </param>

  <param>
    <name>length_in</name>
    <key>lengthi</key>
    <type>int</type>
  </param>

  <!-- Make one 'sink' node per input. Sub-nodes:
       * name (an identifier for the GUI)
       * type
       * vlen
       * optional (set to 1 for optional inputs) -->
  <sink>
    <name>in_data</name>
    <type>$type</type>
    <vlen>$vector_length</vlen>
  </sink>

  <sink>
    <name>in_flag</name>
    <type>byte</type>
  </sink>

  <!-- Make one 'source' node per output. Sub-nodes:
       * name (an identifier for the GUI)
       * type
       * vlen
       * optional (set to 1 for optional inputs) -->
  <source>
    <name>out</name>
    <type>$type</type>
    <vlen>$vector_length</vlen>
  </source>
  <doc>
    /*!
     * \brief Chop the input data stream according to the flags in the input control stream.
     * \ingroup cdma
     *
     * \details
     * When flag is detected  in the control stream, the chopper start to chop. 
     * The chopper outputs a copy of length_out items from the input stream to the output stream per chop.\n
     * The chopper consumes length_in items from the input and control streams.\n
     * Typically the flags are periodic and length_out>=length_in. Therefore, there exist three cases.\n
     * Case 1: period \leq length_in \leq length_out \n
     * For example, with length_in=4, length_out=5, period=3, the input and output streams will look like \n
     * input:----->abcdefghijklmn...\n
     * flags:----->10010010010010... (period=3)\n
     * outputs:-->abcdeghijkmn...\n
     * \n
     * Case 2: length_in \leq period \leq length_out \n
     * For example, with length_in=4, length_out=6, period=5, the input and output streams will look like \n
     * input:----->abcdefghijklmn...\n
     * flags:----->100001000010000... (period=5)\n
     * outputs:-->abcdeffghijkklmnop...\n
     * \n
     * Case 3: length_in \leq length_out \leq period \n
     * For example, with length_in=4, length_out=6, period=7, the input and output streams will look like \n
     * input:----->abcdefghijklmnopqrst...\n
     * flags:----->100000010000001000000...(periold=7) \n
     * outputs:-->abcdefhijklmonqrst...\n
     *
     */
      /*!
       * \brief Return a shared_ptr to a new instance of cdma::chopper.
       *
       * To avoid accidental use of raw pointers, cdma::chopper's
       * constructor is in a private implementation
       * class. cdma::chopper::make is the public interface for
       * creating new instances.
       *
       * \param vector_length size of input item in data stream
       * \param length_in number of items chopper consumes per chop.
       * \param length_out number of items chopper outputs per chop. Typically length out>=length in.
       */
  </doc>
</block>
